if (t == 1)	{
# 1. define initial soil moisture
s_init <- rep(0.5,NX*NY)
# 2. initialise gwheads
last_heads_in <- gwinput$gwheads
# 3. initialise recharge
rech <- rep(0.0,NX)
} else {
last_heads_in <- GW_store$heads[t-1,]
rech <- GW_store$GWcum[t-1,]
#print(rech)
}
#browser()
# check the river level
if (stream[t,2] < 0.06) {
if (stream[t-1,2] >= 0.06 || t == 1) {
#print("t = 1 or river dry")
# run gwt.exe function first time to
#browser()
GW.out <- Gwt.fun(t, last_t_heads = last_heads_in,
BC = rep(gwinput$gwheads[NX],NRBL), first=T,
aqK = aqK_in, aqy = aq_specy_in, GWcumvector = rech,
slopevector = slopevector.m,
DELT.m = DELT,
NRBL.m = NRBL,
river_in = list(gwinput$Ariver,gwinput$criver,
IXR,IYR),rdir_echo=rdir_in)
# reset DELT (timestep)
DELT <- GW.out$DELT
} else { #this means river is dry, but last step also dry
#print("t1 > 1")
#print(GW_store$GWcum[t-1,])
GW.out <- Gwt.fun(t,last_t_heads = GW_store$heads[t-1,],
first=F, BC = rep(gwheads[NX],NRBL),
aqK = aqK_in, aqy = aq_specy_in, GWcumvector=GW_store$GWcum[t-1,],
slopevector = slopevector.m,
DELT.m = DELT,
NRBL.m = NRBL,rdir_echo=rdir_in)
} #close loop whether first time run
}  else  { # river level > 0
# check if first time after river level back up or first time
if (stream[t-1,2] < 0.06 || t == 1) {
# run gwt.exe function
GW.out <- Gwt.fun(t,last_t_heads = last_heads_in,
first=T, BC = c(riverheads[t],gwheads[NX]),
aqK = aqK_in,  aqy = aq_specy_in, GWcumvector=rech,
slopevector = slopevector.m,
DELT.m = DELT,
NRBL.m = NRBL,
river_in = list(Ariver,criver,
IXR,IYR),rdir_echo=rdir_in)
} else {
GW.out <- Gwt.fun(t,last_t_heads = GW_store$heads[t-1,],
first=F, BC = c(gwinput$riverheads[t],gwinput$gwheads[NX]),
aqK = aqK_in,  aqy = aq_specy_in, GWcumvector=GW_store$GWcum[t-1,],
slopevector = slopevector.m,
DELT.m = DELT,
NRBL.m = NRBL,rdir_echo=rdir_in)
} # Close if loop whether first time run
} # close riverlevel loop
# reset DELT
# print(paste("gwt.exe is run and DELT =",DELT))
#	DELT <- GW.out$DELT
GW.out$out$Gwcum <- rep(0.0,NX)
STOP <- GW.out$STOP
#print(STOP)
#	print(GW.out$out$Gwcum)
#	print(GW_store$GWcum[t-1,])
# change DELT
DELT <- ifelse(GW.out$DELT==1,1,DELT + 1)
# write away gw output
# if Gwt.fun wasn't run, it just writes the last one again
r <- 1:(ncol(GW.out$out))
#		print(GW.out$out)
GW_store <- list.write.fun(r, input=GW.out$out,
output = GW_store, t = t)
#str(GW_store)
#		print("GW_store$GWcum:")
#print(GW_store$GWdepths[t,])
#		save(GW_store,file="GW_store_temp")
#browser()
if(is.null(Zmean)==T) Zmean_in <- rep(200,NX) else Zmean_in <- Zmean
Storage_Gridday <- WBEcoHyd(t=t,R=R[t],ET_in=ETp[t,2],vtype=vtype,
soilpar=soilpar_in, s_init = s_init,
fullday = t,
Zmean = Zmean_in,
GWdepths=-100*GW_store$GWdepths[t,],
GWdepths_prev=-100*last_heads_in,
deltat=12, NX, NY)
#browser()
# daily values across grid
Storage_day <- list.write.fun2(input=Storage_Gridday,
output = Storage_day, t=t)
#str(Storage_day)
# Accumulate the GW recharge, this is now in GW_store
GW_store$GWcum[t,] <- GW_store$GWcum[t,] + Storage_day$GWrech[t,]*0.01 # m/day
#print(Storage_day$GWrech[t,]*0.01)
print(paste("t =",t))
} # close t loop
# ------------ END OF LOOPS ---------------------
#browser()
# Run gwt_fun one last time
GW.out <- Gwt.fun(t = N+1, last_t_heads = GW_store$heads[N,],
first=F,#
BC = c(gwinput$riverheads[t],gwinput$gwheads[NX]),
aqK = aqK_in,  aqy = aq_specy_in,
GWcumvector=GW_store$GWcum[N,],
slopevector = slopevector.m,
DELT.m = DELT,
NRBL.m = NRBL,rdir_echo=rdir_in)
# write away gw output
r <- 1:(ncol(GW.out$out))
GW_store <- list.write.fun(r, input=GW.out$out,
output = GW_store, t = N + 1)
STOP <- TRUE
}
# ---------------------------------------------
# Write and store output
# -------------------------------------
# check if output dir exists
ifelse(!dir.exists(file.path(getwd(), "Output")),
dir.create(file.path(getwd(), "Output")), FALSE)
# write away values to some files (WB etc)
Storage.out <- do.call(cbind,Storage_day)
write.csv(Storage.out,paste(getwd(),"/output/",NameRun,"_DailyOutput_table.csv",sep=""),
row.names=FALSE)
GWstore.out <- do.call(cbind,GW_store)
write.csv(GWstore.out,paste(getwd(),"/output/",NameRun,"_GWOutput_table.csv",sep=""),
row.names=FALSE)
# Create a water balance table
# Not that important
Wb <- apply(Storage.out,2,sum)
Wb[c(1:42,((8*42):((9*42)-1)))] <-
apply(Storage.out,2,mean)[c(1:42,((8*42):((9*42)-1)))]
#print(Wb)
write.table(Wb,paste(getwd(),"/output/",NameRun,"_Output_WB_table.csv",sep=""),row.names=FALSE,
col.names=TRUE,sep=",")
# Create output out of function
# vector of X distances etc
Storage_day$x=distancetoriver
Storage_day$vtype = vtype
Storage_day$gwlevel = GW_store$GWdepths[1:N,]
Storage_day$qrivlat = GW_store$qrivlat[1:N,]
Storage_day$Rain = Rain[1:N,2]
Storage_day$Stream = Stream[1:N,2]
print(NameRun)
# ------------------------------------- end output-----------------
return(Storage_day)
} # end function
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aqK_in = sp$K_s/100,
aq_specy_in  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today.m = today)
gwheads
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aqK_in = sp$K_s/100,
aq_specy_in  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today.m = today)
gwheads
gwheads.m = gwheads
library(EcoHydro2D)
require(lattice)
require(EcoHydro2D)
today <- format(Sys.Date(),"%Y%m%d")
days <- seq(as.Date("2005-01-01"),as.Date("2006-12-31"),by=1)
Rain_uni <- data.frame(Dates = days, Rain = rep(0.1,730))
# start with no water in Stream
Stream0 <- data.frame(Dates = days, Height = rep(0,730))
# and uniform ETp
ETp_uni <- data.frame(Dates = days, ET = rep(0.5,730))
# show the options
ecohydro2d.options()
# you can now call different elements and reset them
# Initial groundwater heads
gw_in <-  rep(-6,length(ecohydro2d.options()$DELX))
# this is needed for Trees with deep roots
Zmean <- rep(600,length(ecohydro2d.options()$DELX))
# Define the vegetation series as being uniform grass
veg <- rep("Grass",length(ecohydro2d.options()$DELX))
# Define what soil to use
soils <- "L Med Clay"
sp <- Soil_cpp("soils")
#
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K_f = sp$K_s/100,
aq_specy_f  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today_f = today)
veg
library(EcoHydro2D)
setwd(paste(getwd(),"examples","/"))
setwd(paste(getwd(),"examples",sep = "/"))
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K_f = sp$K_s/100,
aq_specy_f  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today_f = today)
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K_f = sp$K_s/100,
aq_specy_f  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today_f = today)
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K_f = sp$K_s/100,
aq_specy_f  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today_f = today)
GW.out$out
NX
t
gwinput$init_heads
gwinput$riverheads[t]
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K_f = sp$K_s/100,
aq_specy_f  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today_f = today)
library(EcoHydro2D)
getwd()
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K_f = sp$K_s/100,
aq_specy_f  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today_f = today)
GW.out$out
vtype
library(EcoHydro2D)
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K_f = sp$K_s/100,
aq_specy_f  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today_f = today)
library(EcoHydro2D)
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K_f = sp$K_s/100,
aq_specy_f  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today_f = today)
library(EcoHydro2D)
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K_f = sp$K_s/100,
aq_specy_f  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today_f = today)
library(EcoHydro2D)
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K_f = sp$K_s/100,
aq_specy_f  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today_f = today)
library(EcoHydro2D)
require(lattice)
require(EcoHydro2D)
require(Kable)
today <- format(Sys.Date(),"%Y%m%d")
install.packages("Kable")
install.packages("kable")
require(lattice)
require(EcoHydro2D)
require(knitr)
today <- format(Sys.Date(),"%Y%m%d")
days <- seq(as.Date("2005-01-01"),as.Date("2005-3-31"),by=1)
Rain_uni <- data.frame(Dates = days, Rain = rep(0.1,length(days)))
# start with no water in Stream
Stream0 <- data.frame(Dates = days, Height = rep(0,length(days)))
# and uniform ETp
ETp_uni <- data.frame(Dates = days, ET = rep(0.5,length(days)))
# show the options
ecohydro2d.options()
# you can now call different elements and reset them
# Initial groundwater heads
gw_in <-  rep(-6,ecohydro2d.options()$NX)
# this is needed for Trees with deep roots
Zmean <- rep(600,ecohydro2d.options()$NX)
# Define the vegetation series as being uniform grass
veg <- rep("Grass",ecohydro2d.options()$NX)
# Define what soil to use
soils <- "L Med Clay"
sp <- Soil_cpp("soils")
#
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K = sp$K_s/100,
aq_specy  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today = today)
library(EcoHydro2D)
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K = sp$K_s/100,
aq_specy  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today = today)
library(EcoHydro2D)
library(EcoHydro2D)
library(EcoHydro2D)
library(EcoHydro2D)
library(EcoHydro2D)
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K = sp$K_s/100,
aq_specy  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today = today)
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K = sp$K_s/100,
aq_specy  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today = today)
result <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K = sp$K_s/100,
aq_specy  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream0, gwheads = gw_in,
Zmean = Zmean,today = today)
names(result)
kable(read.csv("figs/big_funColumnExplanation.csv"))
# use stackfun
Out <- stackfun(result,ecohydro2d.options()$NX)
head(Out) # creates a wide dataframe
# put in dates rather than sequential numbers:
Out$Dates <- rep(Rain_uni$Dates[1:length(result[[1]])],
ecohydro2d.options()$NX)
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~as.factor(x))
p <- p + geom_line(aes(x=Dates,y=Ts,col="soil T"))
p <- p + geom_line(aes(x=Dates,y=gwlevel,col="groundwater"))
print(p)
require(ggplot2)
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p
p <- p + facet_wrap(~as.factor(x))
p
head(Out)
range(OUt$x)
range(Out$x)
as.factor(Out$x)
p <- p + facet_wrap(~as.factor(Out$x))
p
p <- ggplot(Out,aes(x=Dates,y=gwlevel)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~as.factor(Out$x))
p
head(Out)
nrow(Out)
nrow(result)
str(result)
stack(as.data.frame(result$Tsoil[,1:NX]))
stack(as.data.frame(result$Tsoil[,1:12]))
plot(stack(as.data.frame(result$Tsoil[,1:12]))[,1])
p <- ggplot(Out,aes(x=Dates,y=gwlevel)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(.~as.factor(Out$x))
p
?facet_wrap
location=rep(result$x[(length(result$x)-NX+1):length(result$x)],each=length(result$id))
NX <- ecohydro2d.options()$NX
location=rep(result$x[(length(result$x)-NX+1):length(result$x)],each=length(result$id))
length(result$x)
length(result$x)-NX+1
result$x
length(result$id)
result$x[(length(result$x)-NX+1):length(result$x)]
NX
p <- ggplot(Out,aes(x=Dates,y=gwlevel)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~vtype)
p
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~vtype)
p
Out <- stackfun(result,ecohydro2d.options()$NX)
library(EcoHydro2D)
Out <- stackfun(result,ecohydro2d.options()$NX)
Out$Dates <- rep(Rain_uni$Dates[1:length(result[[1]])],
ecohydro2d.options()$NX)
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~location)
p
p <- p + geom_line(aes(x=Dates,y=Ts,col="soil T"))
p
range(Out$Ts)
range(Out$gwlevel)
labels <- paste("distance =", unique(Out$x))
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~location,labeller=labeller(location = labels))
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
labels <- paste("distance =", unique(Out$location))
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~location,labeller=labeller(location = labels))
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
paste("distance =", unique(Out$location))
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(.~location,labeller=labeller(location = labels))
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
labels <- paste("distance =", unique(Out$location))
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~location,labeller=labeller(location = labels))
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
labels <- paste("distance =", unique(Out$location))
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~location,labeller=labeller(labels))
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~location,labeller=labeller(as.character(labels)))
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
labels
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~location,labeller=labels)
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~location,labeller=as.list(labels))
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
labels <- paste("distance =", Out$location)
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~location,labeller=labels)
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
p <- ggplot(Out,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + facet_wrap(~location,labeller=label_both)
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
ecohydro2d.options()
Stream1 <- data.frame(Dates = days, Height = rep(1,length(days)))
result_wriver <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K = sp$K_s/100,
aq_specy  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream1, gwheads = gw_in,
Zmean = Zmean,today = today)
library(EcoHydro2D)
result_wriver <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K = sp$K_s/100,
aq_specy  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream1, gwheads = gw_in,
Zmean = Zmean,today = today)
riverheads[t]
library(EcoHydro2D)
result_wriver <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K = sp$K_s/100,
aq_specy  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream1, gwheads = gw_in,
Zmean = Zmean,today = today)
riverheads
library(EcoHydro2D)
result_wriver <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg,
aq_K = sp$K_s/100,
aq_specy  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream1, gwheads = gw_in,
Zmean = Zmean,today = today)
library(EcoHydro2D)
Out_wriver <- stackfun(result_wriver,ecohydro2d.options()$NX)
head(Out_wriver) # creates a wide dataframe
# put in dates rather than sequential numbers:
Out_wriver$Dates <- rep(Rain_uni$Dates[1:length(result[[1]])],
ecohydro2d.options()$NX)
p <- ggplot(Out_wriver,aes(x=Dates,y=gwlevel)) + geom_line(aes(col="Groundwater level"))
p <- p + facet_wrap(~location,labeller=label_both)
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
veg_new <- c(rep("TreesDR",ecohydro2d.options()$NX/2),rep("Grass",ecohydro2d.options()$NX/2))
result_new_veg <- big_fun(N=nrow(Rain_uni),stype=soils,vtype=veg_new,
aq_K = sp$K_s/100,
aq_specy  = sp$spec_y,
Rain=Rain_uni, ETp=ETp_uni,
stream=Stream1, gwheads = gw_in,
Zmean = Zmean,today = today)
names(Out)
Out_new_veg <- stackfun(result_new_veg,ecohydro2d.options()$NX)
head(Out_new_veg) # creates a wide dataframe
# put in dates rather than sequential numbers:
Out_new_veg$Dates <- rep(Rain_uni$Dates[1:length(result[[1]])],
ecohydro2d.options()$NX)
p <- ggplot(Out_new_veg,aes(x=Dates,y=Ttotal)) + geom_line(aes(col="Total T"))
p <- p + geom_line(aes(x=Dates,y=Ts,col = "T soil"))
p <- p + geom_line(aes(x=Dates,y=Tg,col = "T groundwater"))
p <- p + facet_wrap(~location,labeller=label_both)
p <- p + theme(axis.text.x  = element_text(angle=90, vjust=0.5))
print(p)
require(pandoc)
install.packages(pandoc)
install.packages("pandoc")
install.packages("devtools")
devtools::use_vignette("my-vignette")
install.packages("formatR")
require(devtools)
getwd()
dir()
devtools::create("ecohydr2d")
